local bootstrapModule = require("bootstrap")

bootstrapModule.bootstrap()

-- –ø–ª–∞–≥–∏–Ω—ã
require("lazy").setup({
    -- Telescope –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
    {
        "nvim-telescope/telescope.nvim",
        dependencies = { "nvim-lua/plenary.nvim" }
    },

    -- Telescope –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
    { "catppuccin/nvim", name = "catppuccin", priority = 1000 },

    -- –°–µ—Å—Å–∏–∏
    {
        "rmagatti/auto-session",
        config = function()
            -- –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ —Å–µ—Å—Å–∏–π
            vim.o.sessionoptions = "buffers,curdir,tabpages,winpos,winsize,localoptions"

            require("auto-session").setup {
              log_level = "info",
              auto_session_enable_last_session = false,  -- –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ—Å—Å–∏—é
              auto_session_root_dir = vim.fn.stdpath("data").."/sessions/",
              session_lens_enable = true,
            }

            -- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –µ—Å–ª–∏ –±—ã–ª–∞ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            vim.api.nvim_create_autocmd("VimEnter", {
              callback = function()
                local cwd = vim.fn.getcwd()
                local session_name = vim.fn.fnamemodify(cwd, ":p:h:t") -- –∏–º—è —Å–µ—Å—Å–∏–∏ –ø–æ –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏
                local session_path = vim.fn.stdpath("data").."/sessions/"..session_name..".vim"

                if vim.fn.filereadable(session_path) == 1 then
                  vim.cmd("silent! source " .. session_path)
                end
              end
            })

        end
    },

    {
      "nvim-neo-tree/neo-tree.nvim",
      branch = "v3.x",
      dependencies = {
        "nvim-lua/plenary.nvim",
        "nvim-tree/nvim-web-devicons", -- –∏–∫–æ–Ω–∫–∏
        "MunifTanjim/nui.nvim",
      },
      config = function()
        require("neo-tree").setup({
          sources = { "filesystem", "git_status", "buffers" }, -- —Ç—Ä–∏ —Ä–µ–∂–∏–º–∞
          source_selector = {
            winbar = true, -- –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Å–≤–µ—Ä—Ö—É –ø–∞–Ω–µ–ª–∏
            show_scrolled_off_parent = false,
            separator = " | ", -- —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∫–Ω–æ–ø–∫–∞–º–∏
            content_layout = "center",
            tabs_layout = "equal", -- —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
          },
          window = {
            position = "left", -- üëà –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–µ—Ä–µ–≤–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É —ç–∫—Ä–∞–Ω–∞
            width = 50,
          },
          follow_current_file = {
              enabled = true,   -- üëà —Å–ª–µ–¥–∏–º –∑–∞ —Ç–µ–∫—É—â–∏–º —Ñ–∞–π–ª–æ–º
              leave_dirs_open = false, -- –∑–∞–∫—Ä—ã–≤–∞—Ç—å –Ω–µ—Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–∞–ø–∫–∏
          },
          filesystem = {
            filtered_items = {
                hide_dotfiles = false, -- –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã
                hide_gitignored = true,
            },
          },
        })

      end
    },
    -- LSP + Mason + Autocomplete
    {
      "williamboman/mason.nvim",
      config = true
    },

    {
      "akinsho/bufferline.nvim",
      version = "*",
      dependencies = { "nvim-tree/nvim-web-devicons" },
      config = function()
        require("bufferline").setup({
          options = {
            diagnostics = "nvim_lsp",       -- –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –æ—Ç LSP
            separator_style = "slant",      -- —Å—Ç–∏–ª—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π: "slant", "thick", "thin"
            show_buffer_close_icons = false,
            show_close_icon = true,
            always_show_bufferline = true,
          },
        })
        end
    },

    {
      "williamboman/mason-lspconfig.nvim",
      dependencies = { "neovim/nvim-lspconfig" },
      config = function()
        require("mason").setup()
        require("mason-lspconfig").setup({
          ensure_installed = {
              "ts_ls",
              "lua_ls",
              "angularls",
              "dockerls", -- Dockerfile
              "docker_compose_language_service", -- docker-compose.yaml
          },
        })

        local lspconfig = require("lspconfig")

        -- –û–±—â–∏–µ keymaps –¥–ª—è LSP
        local on_attach = function(_, bufnr)
          local opts = { noremap = true, silent = true, buffer = bufnr }

          -- –î–µ–≤–∏–Ω–∏—à–µ–Ω—ã
          vim.keymap.set("n", "gd", vim.lsp.buf.definition, opts)
          vim.keymap.set("n", "gr", vim.lsp.buf.references, opts)

          -- –ò–Ω—Ñ–∞
          vim.keymap.set("n", "K", vim.lsp.buf.hover, opts)

          -- –≠–∫—à–µ–Ω—ã
          vim.keymap.set("n", "<leader>rn", vim.lsp.buf.rename, opts)
          vim.keymap.set("n", "<leader>ca", vim.lsp.buf.code_action, opts)

          -- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
          vim.keymap.set("n", "[d", bufnr.goto_prev, opts)
          vim.keymap.set("n", "]d", bufnr.goto_next, opts)
          vim.keymap.set("n", "<leader>d", vim.diagnostic.open_float, opts)
        end

        lspconfig.lua_ls.setup({
          settings = {
            Lua = {
              diagnostics = {
                globals = { "vim" }, -- –≥–æ–≤–æ—Ä–∏–º, —á—Ç–æ vim –≥–ª–æ–±–∞–ª–µ–Ω
              },
              workspace = {
                library = vim.api.nvim_get_runtime_file("", true), -- Neovim runtime
                checkThirdParty = false,
              },
            },
          },
        })

        -- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ TypeScript/JavaScript (tsserver)
        lspconfig.ts_ls.setup({
          on_attach = on_attach,
          capabilities = require("cmp_nvim_lsp").default_capabilities(),
        })

        -- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Angular
        lspconfig.angularls.setup({
          on_attach = on_attach,
          capabilities = require("cmp_nvim_lsp").default_capabilities(),
        })
      end
    },

    {
      "folke/which-key.nvim",
      event = "VeryLazy", -- —á—Ç–æ–±—ã –Ω–µ –≥—Ä—É–∑–∏–ª—Å—è —Å—Ä–∞–∑—É
      config = function()
        require("which-key").setup({
            plugins = {
                presets = {
                    operators = true, -- d, y, etc.
                    motions   = true, -- w, e, etc.
                    text_objects = true, -- aw, iw, etc.
                    windows = true, -- <c-w>
                    nav = true, -- gj, gk, etc.
                    z = true, -- folds
                    g = true, -- git & motions
                },
            }
        })
      end,
    },

    {
      "hrsh7th/nvim-cmp",
      dependencies = {
        "hrsh7th/cmp-nvim-lsp",
        "hrsh7th/cmp-buffer",
        "hrsh7th/cmp-path",
        "L3MON4D3/LuaSnip"
      },
      config = function()
        local cmp = require("cmp")
        cmp.setup({
          mapping = {
            ["<C-Space>"] = cmp.mapping.complete(),
            ["<CR>"] = cmp.mapping.confirm({ select = true }),
            ["<C-n>"] = cmp.mapping.select_next_item(),
            ["<C-p>"] = cmp.mapping.select_prev_item(),
          },
          sources = {
            { name = "nvim_lsp" },
            { name = "buffer" },
            { name = "path" },
          },
          snippet = {
            expand = function(args)
              require("luasnip").lsp_expand(args.body)
            end,
          },
        })
      end
    }

})

require("telescope").setup({
  pickers = {
    buffers = {
      sort_mru = true,      -- —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
      mappings = {
        n = {
          ["D"] = "delete_buffer",     -- —É–¥–∞–ª–∏—Ç—å –±—É—Ñ–µ—Ä –≤ normal mode
        },
      },
    },
  },
})

-- –ø—Ä–æ–±–µ–ª –∫–∞–∫ leader
vim.g.mapleader = " "

-- –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
vim.opt.number = true
vim.opt.relativenumber = true
vim.opt.tabstop = 4 
vim.opt.shiftwidth = 4
vim.opt.expandtab = true
vim.opt.smartindent = true
vim.opt.mouse = "a"
vim.opt.clipboard = "unnamedplus"
vim.opt.swapfile = false
vim.opt.backup = false
vim.opt.writebackup = false
vim.opt.undofile = true

vim.cmd.colorscheme "catppuccin-macchiato"


-- Telescope
vim.keymap.set("n", "<leader>ff", "<Cmd>Telescope find_files<CR>", { desc = "–ù–∞–π—Ç–∏ —Ñ–∞–π–ª" })
vim.keymap.set("n", "<leader>fg", "<Cmd>Telescope live_grep<CR>", { desc = "–ù–∞–π—Ç–∏ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å—Ç—Ä–æ–∫—É" })
vim.keymap.set("n", "<leader>bl", "<Cmd>Telescope buffers<CR>", { desc = "–°–ø–∏—Å–æ–∫ –±—É—Ñ–µ—Ä–æ–≤" })


-- –î–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤
vim.keymap.set("n", "<leader>e", function()
  require("neo-tree.command").execute({ toggle = true })
end, { desc = "Toggle Neo-tree" })
-- vim.keymap.set("n", "<leader>e", "<Cmd>Neotree reveal toggle<CR>", { desc = "–î–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤" })
-- vim.keymap.set("n", "<leader>e", "<Cmd>Neotree reveal toggle<CR>", { desc = "–î–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤" })
-- –º–∞–ø—ã –≤–Ω—É—Ç—Ä–∏ –¥–µ—Ä–µ–≤–∞ (–≤ normal mode)
-- a ‚Üí —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª/–ø–∞–ø–∫—É
-- d ‚Üí —É–¥–∞–ª–∏—Ç—å
-- r ‚Üí –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å
-- <CR> ‚Üí –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –≤ —Ç–µ–∫—É—â–µ–º –æ–∫–Ω–µ

-- –°–±—Ä–æ—Å –ø–æ–∏—Å–∫–∞
vim.keymap.set("n", "<leader>h", "<Cmd>nohl<CR>", { desc = "–°–±—Ä–æ—Å –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –ø–æ–∏—Å–∫–∞" })

-- –ë—É—Ñ–µ—Ä—ã
vim.keymap.set("n", "<leader>bn", "<Cmd>BufferLineCycleNext<CR>", { desc = "–°–ª–µ–¥—É—é—â–∏–π –±—É—Ñ–µ—Ä" })
vim.keymap.set("n", "<leader>bp", "<Cmd>BufferLineCyclePrev<CR>", { desc = "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –±—É—Ñ–µ—Ä" })
vim.keymap.set("n", "<leader>bd", "<Cmd>bdelete<CR>", { desc = "–ó–∞–∫—Ä—ã—Ç—å –±—É—Ñ–µ—Ä" })

-- Visual mode: —Å–¥–≤–∏–≥ –±–ª–æ–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è
vim.keymap.set("v", "<", "<gv", { desc = "–°–¥–≤–∏–Ω—É—Ç—å –≤–ª–µ–≤–æ –∏ –æ—Å—Ç–∞—Ç—å—Å—è –≤ VISUAL" })
vim.keymap.set("v", ">", ">gv", { desc = "–°–¥–≤–∏–Ω—É—Ç—å –≤–ø—Ä–∞–≤–æ –∏ –æ—Å—Ç–∞—Ç—å—Å—è –≤ VISUAL" })

-- Visual block mode (Ctrl+v) ‚Äî —Ç–æ–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
vim.keymap.set("x", "<", "<gv", { desc = "–°–¥–≤–∏–Ω—É—Ç—å –±–ª–æ–∫ –≤–ª–µ–≤–æ –∏ –æ—Å—Ç–∞—Ç—å—Å—è –≤ VISUAL" })
vim.keymap.set("x", ">", ">gv", { desc = "–°–¥–≤–∏–Ω—É—Ç—å –±–ª–æ–∫ –≤–ø—Ä–∞–≤–æ –∏ –æ—Å—Ç–∞—Ç—å—Å—è –≤ VISUAL" })
